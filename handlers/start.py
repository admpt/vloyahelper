from datetime import timedelta, datetime, date

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from models.users_tasks import User
from states import TimeZoneSetup

router = Router()

GROUP_ID = -1002808343764
INVITE_LINK = "https://t.me/+DyydsMuO8vA5ZTJi"

# URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
WEBAPP_URL = "https://f260-82-215-100-140.ngrok-free.app/static/index.html"


def get_invite_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=INVITE_LINK)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )


def get_start_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –≥–æ—Ç–æ–≤", callback_data="ready_start")],
            [InlineKeyboardButton(text="–ú–µ–Ω—è —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω—ã–Ω–µ—à–Ω—è—è –∂–∏–∑–Ω—å", callback_data="not_ready")],
        ]
    )


def parse_timezone_offset(time_line: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    import re
    match = re.match(r'UTC([+-])(\d{1,2}):?(\d{0,2})', time_line)
    if not match:
        return 180  # UTC+3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    sign = 1 if match.group(1) == '+' else -1
    hours = int(match.group(2))
    minutes = int(match.group(3)) if match.group(3) else 0

    return sign * (hours * 60 + minutes)


def get_user_local_date(user: User) -> date:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    offset_minutes = parse_timezone_offset(user.time_line)
    utc_now = datetime.utcnow()
    user_time = utc_now + timedelta(minutes=offset_minutes)
    return user_time.date()


def is_new_day(user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    today = get_user_local_date(user)
    return user.last_learning_date != today


async def get_leaderboard_text(session: AsyncSession, user_id: int) -> str:
    top_result = await session.execute(
        select(User).order_by(User.exp.desc()).limit(15)
    )
    top_users = top_result.scalars().all()

    def format_name(user: User) -> str:
        first = user.first_name or ""
        last = user.last_name or ""
        full = (first + " " + last).strip()
        return full if full else "–ë–µ–∑ –∏–º–µ–Ω–∏"

    leaderboard_lines = [
        f"{i + 1}. {format_name(user)} ‚Äî {user.exp} XP"
        for i, user in enumerate(top_users)
    ]

    leaderboard_block = (
            "<blockquote>"
            "<b>üèÜ –¢–æ–ø-15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            + "\n".join(leaderboard_lines) +
            "</blockquote>"
    )

    all_result = await session.execute(select(User).order_by(User.exp.desc()))
    all_users = all_result.scalars().all()
    user_place = next((i + 1 for i, u in enumerate(all_users) if u.telegram_id == user_id), None)
    user_place_block = (
        f"<blockquote>üîé –¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>#{user_place}</b></blockquote>"
        if user_place else
        "<blockquote>‚ùì –¢—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</blockquote>"
    )

    return f"{leaderboard_block}\n{user_place_block}"


def get_main_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å", callback_data="my_tasks")],
            [InlineKeyboardButton(
                text="üåü –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )]
        ]
    )


def get_user_stats_text(user: User) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    total_learned = len(user.eng_learned_words or [])
    streak = user.current_streak or 0
    exp = user.exp or 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è
    today_progress = ""
    if user.words_per_day and user.last_learning_date == get_user_local_date(user):
        if is_new_day(user):
            learned_today = 0
        else:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤, –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
            learned_today = min(user.words_per_day, total_learned)

        today_progress = f"\nüìö –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–µ–Ω–æ: {learned_today}/{user.words_per_day} —Å–ª–æ–≤"

    stats_text = (
        f"<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak}\n"
        f"üìñ –°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {total_learned}\n"
        f"‚≠ê –û–ø—ã—Ç: {exp} XP"
        f"{today_progress}"
    )

    return stats_text


@router.message(Command("start"))
async def cmd_start(message: Message, bot, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id

    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        if member.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
            raise Exception("Not in group")
    except Exception:
        await message.answer(
            "üö™ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—Å—Ç—É–ø–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=get_invite_keyboard()
        )
        return

    existing_user = await session.get(User, user_id)
    if existing_user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        stats_text = get_user_stats_text(existing_user)
        leaderboard_text = await get_leaderboard_text(session, user_id)

        full_text = f"{stats_text}\n\n{leaderboard_text}"

        await message.answer(
            full_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    await message.answer(
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º, –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n\n<b>–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å?</b>",
        parse_mode="HTML",
        reply_markup=get_start_keyboard()
    )


@router.callback_query(F.data == "ready_start")
async def user_ready(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üö™ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—Å—Ç—É–ø–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=get_invite_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "not_ready")
async def user_not_ready(callback: CallbackQuery):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚ú®")
    await callback.answer()


@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, bot, state: FSMContext):
    user_id = callback.from_user.id

    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        if member.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
            raise Exception("Not in group")
    except Exception:
        await callback.answer("‚ùå –¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –≤ –≥—Ä—É–ø–ø–µ.", show_alert=True)
        return

    await callback.message.edit_text("–í–∏–∂—É —Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü –∑–∞—à–µ–ª...")
    await callback.message.answer(
        "üïí –ò—Ç–∞–∫, –ø–µ—Ä–≤—ã–π —à–∞–≥. –ö–æ—Ç–æ—Ä—ã–π —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —á–∞—Å? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `—á—á:–º–º`, –Ω–∞–ø—Ä–∏–º–µ—Ä `14:30`.",
        parse_mode="Markdown"
    )
    await callback.answer()
    await state.set_state(TimeZoneSetup.waiting_for_local_time)


@router.message(TimeZoneSetup.waiting_for_local_time)
async def handle_user_local_time(message: Message, state: FSMContext, session: AsyncSession):
    try:
        text = message.text.strip()
        dt = datetime.strptime(text, "%H:%M")

        now_utc = datetime.utcnow()
        user_time = timedelta(hours=dt.hour, minutes=dt.minute)
        utc_time = timedelta(hours=now_utc.hour, minutes=now_utc.minute)
        offset = user_time - utc_time

        offset_hours = int(offset.total_seconds() // 3600)
        offset_minutes = int((offset.total_seconds() % 3600) // 60)
        if offset_hours > 12:
            offset_hours -= 24
        elif offset_hours < -12:
            offset_hours += 24

        sign = "+" if offset_hours >= 0 else "-"
        tz_string = f"UTC{sign}{abs(offset_hours):02d}:{abs(offset_minutes):02d}"

        telegram_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""

        existing_user = await session.get(User, telegram_id)
        if not existing_user:
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                time_line=tz_string,
                exp=0,
                awards="",
                words_per_day=None,
                eng_learned_words=[],
                eng_skipped_words=[],
                last_learning_date=None,
                current_streak=0
            )
            session.add(user)
        else:
            existing_user.time_line = tz_string

        await session.commit()
        await state.clear()

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫: `{tz_string}`.\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç–≤–æ–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üïí\n\n"
            "üåü –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É <b>–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤</b> –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!",
            parse_mode="HTML"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = existing_user if existing_user else await session.get(User, telegram_id)
        stats_text = get_user_stats_text(user)
        leaderboard_text = await get_leaderboard_text(session, telegram_id)

        full_text = f"{stats_text}\n\n{leaderboard_text}"

        await message.answer(
            full_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )

    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30.",
            parse_mode="Markdown"
        )


@router.message()
async def show_main_menu(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    existing_user = await session.get(User, user_id)

    if not existing_user:
        await message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º, –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n\n<b>–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å?</b>",
            parse_mode="HTML",
            reply_markup=get_start_keyboard()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    stats_text = get_user_stats_text(existing_user)
    leaderboard_text = await get_leaderboard_text(session, user_id)

    full_text = f"{stats_text}\n\n{leaderboard_text}"

    await message.answer(
        full_text,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )


COMMON_TASKS = [
    {"id": "wake_up", "text": "‚è∞ –ü–æ–¥—ä—ë–º –¥–æ 7:00"},
    {"id": "learn_words", "text": "üìò –£—á–∏—Ç—å 5 —Å–ª–æ–≤"},
    {"id": "workout", "text": "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"},
]


@router.callback_query(F.data == "my_tasks")
async def show_common_tasks(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()

    for task in COMMON_TASKS:
        builder.button(
            text=task["text"],
            callback_data=f"task_{task['id']}"
        )

    builder.button(text="+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")
    builder.adjust(1)  # –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    await callback.message.edit_text(
        "<b>–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ –¥–µ–Ω—å:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()