// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = window.location.origin + '/api';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userData = null;
let telegramUser = null;
let selectedWordsPerDay = null;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
let currentLearningSession = {
    allWords: [],
    currentBatch: [],
    batchIndex: 0,
    currentIndex: 0,
    phase: 'learning',
    isTranslationShown: false,
    learnedCount: 0,
    batchSize: 5,
    wrongAnswers: [],
    isReviewMode: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();

        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            telegramUser = tg.initDataUnsafe.user;
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', telegramUser);
        } else {
            telegramUser = {
                id: 123456789,
                first_name: 'Test',
                last_name: 'User',
                username: 'testuser'
            };
            console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }

        if (tg.colorScheme === 'dark') {
            document.body.classList.add('dark-theme');
        }

        loadUserData();
    } else {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        telegramUser = {
            id: 123456789,
            first_name: 'Test',
            last_name: 'User',
            username: 'testuser'
        };
        loadUserData();
    }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiRequest(endpoint, method = 'GET', data = null) {
    const url = `${API_BASE}${endpoint}`;
    const options = {
        method,
        headers: {
            'Content-Type': 'application/json',
        }
    };

    if (data) {
        options.body = JSON.stringify(data);
    }

    try {
        console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);
        const response = await fetch(url, options);

        if (!response.ok) {
            console.error(`‚ùå HTTP ${response.status}: ${response.statusText}`);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', result);
        return result;
    } catch (error) {
        console.error('‚ùå API request failed:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î...');

    try {
        userData = await apiRequest(`/users/${telegramUser.id}`);
        if (userData) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', userData);
            updateUI();
            checkDayStatus();
        } else {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º:', error);

        // Fallback - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            userData = await apiRequest('/users', 'POST', {
                telegram_id: telegramUser.id,
                username: telegramUser.username || null,
                first_name: telegramUser.first_name || 'User',
                last_name: telegramUser.last_name || null
            });
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', userData);
            updateUI();
            checkDayStatus();
        } catch (createError) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            const progressMessage = document.getElementById('progress-message');
            if (progressMessage) {
                progressMessage.innerHTML = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
                progressMessage.style.color = '#FF9500';
            }

            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            userData = {
                telegram_id: telegramUser.id,
                first_name: telegramUser.first_name || 'User',
                exp: 0,
                words_per_day: null,
                eng_learned_words: [],
                eng_skipped_words: [],
                current_streak: 0,
                last_learning_date: null
            };
            updateUI();
            checkDayStatus();
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData() {
    if (!userData || !telegramUser) return;

    try {
        await apiRequest(`/users/${telegramUser.id}`, 'PUT', userData);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
async function getRandomWords(count, excludeIds = []) {
    try {
        console.log(`üìö –ü–æ–ª—É—á–∞–µ–º ${count} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î, –∏—Å–∫–ª—é—á–∞—è:`, excludeIds);
        const excludeQuery = excludeIds.length > 0 ? `?exclude=${excludeIds.join(',')}` : '';
        const words = await apiRequest(`/words/random/${count}${excludeQuery}`);
        console.log('‚úÖ –°–ª–æ–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î:', words);
        return words || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –ë–î:', error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ ID
async function getWordsByIds(ids) {
    try {
        console.log('üìö –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ ID –∏–∑ –ë–î:', ids);
        const words = await apiRequest(`/words/by-ids`, 'POST', { ids });
        console.log('‚úÖ –°–ª–æ–≤–∞ –ø–æ ID –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î:', words);
        return words || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ ID –∏–∑ –ë–î:', error);
        return [];
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω—è
function checkDayStatus() {
    if (!userData) return;

    const today = new Date().toISOString().split('T')[0];
    const lastLearningDate = userData.last_learning_date;

    // –ï—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–µ–Ω—å, –æ–±–Ω–æ–≤–ª—è–µ–º streak
    if (lastLearningDate !== today) {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayStr = yesterday.toISOString().split('T')[0];

        if (lastLearningDate === yesterdayStr) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º streak
        } else if (lastLearningDate) {
            // Streak –ø—Ä–µ—Ä–≤–∞–Ω, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
        }
    }

    updateTodayProgress();
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ–≥–æ–¥–Ω—è
function updateTodayProgress() {
    if (!userData) return;

    const today = new Date().toISOString().split('T')[0];
    const learnedToday = userData.last_learning_date === today ? (userData.eng_learned_words?.length || 0) : 0;
    const targetCount = userData.words_per_day || 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–ª–æ–≤

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ = 20% –æ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ)
    const trainingTarget = Math.max(1, Math.floor(targetCount * 0.4)); // 40% –æ—Ç —Å–ª–æ–≤ –∏–¥–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const wordsTarget = targetCount - trainingTarget; // –û—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ

    // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ userData)
    const trainingsToday = 0; // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

    const progressNumber = document.getElementById('progress-number');
    const progressTotal = document.getElementById('progress-total');
    const progressMessage = document.getElementById('progress-message');
    const progressBar = document.getElementById('progress-bar');
    const reviewBtn = document.getElementById('review-btn');

    // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–ª–æ–≤–∞ + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
    const totalCompleted = learnedToday + trainingsToday;
    const totalTarget = wordsTarget + trainingTarget;

    if (progressNumber) progressNumber.textContent = totalCompleted;
    if (progressTotal) progressTotal.textContent = `–∏–∑ ${totalTarget}`;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    const wordsPercentage = totalTarget > 0 ? (learnedToday / totalTarget) * 100 : 0;
    const trainingsPercentage = totalTarget > 0 ? (trainingsToday / totalTarget) * 100 : 0;
    const totalPercentage = wordsPercentage + trainingsPercentage;

    const circumference = 2 * Math.PI * 60; // —Ä–∞–¥–∏—É—Å 60
    const offset = circumference - (totalPercentage / 100) * circumference;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (progressBar) {
        progressBar.style.strokeDashoffset = offset;

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –¥–≤—É—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        const gradientDefs = progressBar.parentElement.querySelector('defs');
        if (gradientDefs) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const gradient = gradientDefs.querySelector('#progressGradient');
            if (gradient) {
                if (learnedToday >= wordsTarget && trainingsToday >= trainingTarget) {
                    // –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –∑–µ–ª–µ–Ω—ã–π
                    gradient.innerHTML = `
                        <stop offset="0%" style="stop-color:#34C759"/>
                        <stop offset="100%" style="stop-color:#30D158"/>
                    `;
                } else if (learnedToday >= wordsTarget) {
                    // –°–ª–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç - –æ—Ä–∞–Ω–∂–µ–≤—ã–π/–∑–µ–ª–µ–Ω—ã–π
                    gradient.innerHTML = `
                        <stop offset="0%" style="stop-color:#34C759"/>
                        <stop offset="50%" style="stop-color:#FF9500"/>
                        <stop offset="100%" style="stop-color:#FF9500"/>
                    `;
                } else {
                    // –í –ø—Ä–æ—Ü–µ—Å—Å–µ - —Å–∏–Ω–∏–π/—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    gradient.innerHTML = `
                        <stop offset="0%" style="stop-color:#007AFF"/>
                        <stop offset="100%" style="stop-color:#5856D6"/>
                    `;
                }
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    if (progressMessage) {
        if (targetCount === 0) {
            progressMessage.innerHTML = '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –¥–µ–Ω—å';
            progressMessage.style.color = '#666';
            if (reviewBtn) reviewBtn.style.display = 'none';
        } else if (learnedToday >= wordsTarget && trainingsToday >= trainingTarget) {
            if (reviewBtn) reviewBtn.style.display = 'flex';
            progressMessage.style.color = '#34C759';
            progressMessage.innerHTML = 'üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!<br>–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω–æ–µ';
        } else if (learnedToday >= wordsTarget) {
            if (reviewBtn) reviewBtn.style.display = 'flex';
            progressMessage.style.color = '#FF9500';
            progressMessage.innerHTML = `‚úÖ –°–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã (${learnedToday}/${wordsTarget})!<br>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${trainingTarget - trainingsToday}`;
        } else {
            if (reviewBtn) reviewBtn.style.display = learnedToday > 0 ? 'flex' : 'none';
            progressMessage.style.color = '#666';

            const remainingWords = wordsTarget - learnedToday;
            const remainingTrainings = trainingTarget - trainingsToday;

            if (remainingWords === 1 && remainingTrainings === 0) {
                progressMessage.innerHTML = `–û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å –≤—Å–µ–≥–æ 1 —Å–ª–æ–≤–æ!`;
            } else if (remainingWords === 0 && remainingTrainings === 1) {
                progressMessage.innerHTML = `–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!`;
            } else {
                progressMessage.innerHTML = `üìö –°–ª–æ–≤–∞: ${learnedToday}/${wordsTarget} ‚Ä¢ üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${trainingsToday}/${trainingTarget}`;
            }
        }
    }
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
function updateTodayDate() {
    const todayDateEl = document.getElementById('today-date');
    if (todayDateEl) {
        const today = new Date();
        const options = { day: 'numeric', month: 'long' };
        const dateString = today.toLocaleDateString('ru-RU', options);
        todayDateEl.textContent = dateString;
    }
}

// –°–¢–ê–†–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function updateTodayStatus() {
    updateTodayProgress();
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è showScreen –¥–ª—è –Ω–æ–≤—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);

    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    const targetScreen = document.getElementById(screenName + '-screen');
    if (targetScreen) {
        targetScreen.classList.add('active');
        targetScreen.classList.add('fade-in');
    }

    document.querySelectorAll('.footer-item').forEach(item => {
        item.classList.remove('active');
    });

    if (screenName === 'home') {
        const homeItem = document.querySelectorAll('.footer-item')[1];
        if (homeItem) homeItem.classList.add('active');
    } else if (screenName === 'learning') {
        const learningItem = document.querySelectorAll('.footer-item')[0];
        if (learningItem) learningItem.classList.add('active');
    } else if (screenName === 'settings') {
        const settingsItem = document.querySelectorAll('.footer-item')[2];
        if (settingsItem) settingsItem.classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (userData && userData.words_per_day) {
            selectWordsPerDay(userData.words_per_day);
        }
    } else if (screenName === 'statistics') {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
        updateUI();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function selectWordsPerDay(count) {
    selectedWordsPerDay = count;

    document.querySelectorAll('.option-card').forEach(btn => {
        btn.classList.remove('selected');
    });

    const selectedCard = document.querySelector(`[data-value="${count}"]`);
    if (selectedCard) selectedCard.classList.add('selected');

    const saveBtn = document.getElementById('save-settings');
    if (saveBtn) saveBtn.disabled = false;
}

async function saveSettings() {
    if (!selectedWordsPerDay || !userData) return;

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î...');

    const saveBtn = document.getElementById('save-settings');
    if (saveBtn) {
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        saveBtn.disabled = true;
    }

    try {
        userData.words_per_day = selectedWordsPerDay;
        await saveUserData();
        updateUI();
        updateTodayProgress();

        if (saveBtn) {
            saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úì';
        }

        setTimeout(() => {
            startLearning();
        }, 1000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        if (saveBtn) {
            saveBtn.textContent = '–û—à–∏–±–∫–∞';
            saveBtn.disabled = false;
        }
    }
}

// –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startLearning() {
    console.log('üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤...');

    if (!userData || !userData.words_per_day) {
        showScreen('settings');
        return;
    }

    const today = new Date().toISOString().split('T')[0];
    const learnedToday = userData.last_learning_date === today ? (userData.eng_learned_words?.length || 0) : 0;
    const remainingToLearn = userData.words_per_day - learnedToday;

    if (remainingToLearn <= 0) {
        alert('–í—Å–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∏–∑—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ)
    const excludeIds = (userData.eng_learned_words || []).concat(userData.eng_skipped_words || []);
    const newWords = await getRandomWords(remainingToLearn, excludeIds);

    if (newWords.length === 0) {
        alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!');
        return;
    }

    currentLearningSession.allWords = newWords;
    currentLearningSession.isReviewMode = false;

    startLearningSession();
}

// –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
async function startReview() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤...');

    if (!userData || !userData.eng_learned_words || userData.eng_learned_words.length === 0) {
        alert('–ù–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!');
        return;
    }

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const lastWords = userData.eng_learned_words.slice(-10); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–ª–æ–≤
    const learnedWords = await getWordsByIds(lastWords);

    if (learnedWords.length === 0) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!');
        return;
    }

    currentLearningSession.allWords = learnedWords;
    currentLearningSession.isReviewMode = true;

    startLearningSession();
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
function startLearningSession() {
    currentLearningSession.batchIndex = 0;
    currentLearningSession.currentIndex = 0;
    currentLearningSession.phase = 'learning';
    currentLearningSession.isTranslationShown = false;
    currentLearningSession.learnedCount = 0;
    currentLearningSession.wrongAnswers = [];

    loadCurrentBatch();
    showScreen('learning');
    displayCurrentWord();
}

function loadCurrentBatch() {
    const startIndex = currentLearningSession.batchIndex * currentLearningSession.batchSize;
    const endIndex = Math.min(startIndex + currentLearningSession.batchSize, currentLearningSession.allWords.length);
    currentLearningSession.currentBatch = currentLearningSession.allWords.slice(startIndex, endIndex);
    currentLearningSession.currentIndex = 0;
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è displayCurrentWord
function displayCurrentWord() {
    const word = currentLearningSession.currentBatch[currentLearningSession.currentIndex];
    if (!word) {
        console.log('No word found');
        return;
    }

    console.log('üìñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –ë–î:', word);

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏/—ç–º–æ–¥–∑–∏
    const imageEl = document.getElementById('word-image');

    if (imageEl) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ image_data –∏ —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        const blockedImageData = "iVBORw0KGgoAAAANSUhEUgAAAH8AAAB/CAIAAABJ34pEAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NEJFNkNFQUExNUYxMTFFQTlGOEI4RTJGRUNBQTUwOTEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NEJFNkNFQUIxNUYxMTFFQTlGOEI4RTJGRUNBQTUwOTEiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0QkU2Q0VBODE1RjExMUVBOUY4QjhFMkZFQ0FBNTA5MSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0QkU2Q0VBOTE1RjExMUVBOUY4QjhFMkZFQ0FBNTA5MSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pm22FE0AABq1SURBVHja7J2HduNKjoYZJFE5B4fuuTPz/k+0e3b23HvbbmXJClQm9wNKouXQQU7t9rK6nRQo1l8o4AcKhbLDMLTi9ouaHaMfox+jH7cY/Rj9uMXox+jHLUY/Rj9uMfox+nGL0Y/Rj1uMfox+3GL0Y/TjFqMfox+33x793W632Wy3uy1f0ra7IAj44rZDvluW3r/tOrbruo7rOI78TNBcl2/JZNK2Y/Sf1NabzWKxnM3mq9VquVit1ht+YSQ2m81uFzAWOgqBbdmJZCKVSiX5nkzySzrteV4qm83msplMJm2/1xF4X+gj4MC9BGf9pz83/ET81zIFttuNCD9TANwDMwOM7B/k3U3sRT6ZSKQ8GREGgiHx5AfjIcMSo/9IQ6Kn09l4PLmZ8HPu+wsekVu8K7jfv9+7L7YZIQaDMSgU8vlctlop80sul30ns+HXo79colt81Iu/WIA4km+kH+jBjjt0HFvA0n8GNfvhmOwNwNH3UL4zQ3gLU8KTlkQP8SOv+qhQyDEMPPX/EX0+F8UNysPReDgcD4ajw7f9WW+2u+Vqbhj9GAI+vz5EvNRJjOLpeDoeDwajkb/wt1sPpwAQ8tufJ1/qPjIZr1gs1Br1UjHfqNcw0B8cfWWJAdRxPL7p9Qbd7gD019st1tKx7e/L+34sDmOyh1X0S/SK/V/aox90y8w8Xs08qJRLrVajXqvCjhwhrfbHRB+RH41uRqPxYDhGuS+wq9stNwBLN+jvJT209nxeiM1O6byTTEElk17KY6RgNOhrXqCewA7MHVuuwRvWsNK1NJ4RMiqP69dhOkUzCa+BN6pJSIE7VrlWq9SqFYzBR0PfqHi0TbvT6/UHk8nMdZ0DKEc0xvymjzrOflAACNUMZYTFZ9JpKGXKE0LJCIE1JJRBctXJ4lOWqzVmHNpqGKrxycw4milxb4YZbcYQ4jFUq5WLs2alWoYVoZ3ewBIk3maQgbvb7Y0nU+gkw2CUu3WsM0Q1izbge8JxUQi5bBZ2mM1mspm00PdkQiF2jSzzHSRVjweH8bKNPtnqF9AzvWBPk+nMny9QcYyGubgY9sOoG8vBI7wX4eBqvB4thE1+A8/g1dFHPGHviHy73YXDA4qrPlH0Ao0XCHxJVQLAjJhDCuHnpRIWMZtOp5+s6KCw4j1Mse1T4bGrtfrIxkm2IiKLpPPnuje3Ww003UMQ6NRQ9e9KSV9Xc3DxQH96rqNQC38Jd1G1d+gd2Jp4DZINwoXA1gul/CHGABMsXqsoqGe4zxv8I83O1xm0Mfa482Ndf4x2XCKHeeWWR3kwELF4RE0Mfa882Nfw=";

        if (word.image_data && word.image_data !== blockedImageData && !word.image_data.startsWith(blockedImageData.substring(0, 100))) {
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ (base64) –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
            imageEl.innerHTML = `<img src="data:image/png;base64,${word.image_data}" alt="Word Image" style="max-width: 100%; max-height: 120px; border-radius: 10px;">`;
            console.log('üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –ë–î –¥–ª—è —Å–ª–æ–≤–∞:', word.eng);
        } else if (word.image_data && typeof word.image_data === 'string' && word.image_data.length <= 10 && !/^[A-Za-z0-9+/]/.test(word.image_data)) {
            // –ï—Å–ª–∏ —ç—Ç–æ —ç–º–æ–¥–∑–∏ (–∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–µ base64)
            imageEl.innerHTML = word.image_data;
            console.log('üòä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –ë–î –¥–ª—è —Å–ª–æ–≤–∞:', word.eng);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            imageEl.innerHTML = `<img src="/static/gb.png" alt="British Flag" style="max-width: 100%; max-height: 120px; border-radius: 10px;">`;
            console.log('üá¨üáß –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–æ–≤–∞:', word.eng);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        imageEl.style.opacity = '0';
        imageEl.style.transform = 'scale(0.8)';

        // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            imageEl.style.opacity = '1';
            imageEl.style.transform = 'scale(1)';
        }, 100);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    document.getElementById('word-english').textContent = word.eng;
    document.getElementById('word-transcript').textContent = word.transcript || '';
    document.getElementById('word-russian').textContent = word.rus;

    updateProgressAndPhase();
    setupPhaseInterface();
}

function updateProgressAndPhase() {
    if (!currentLearningSession.currentBatch || currentLearningSession.currentBatch.length === 0) {
        return;
    }

    const totalBatches = Math.ceil(currentLearningSession.allWords.length / currentLearningSession.batchSize);
    const currentBatchNum = currentLearningSession.batchIndex + 1;

    let phaseText = '';
    let phaseColor = '';
    let progressPercent = 0;

    const batchProgress = (currentLearningSession.batchIndex * 4);
    const currentPhaseProgress = (currentLearningSession.currentIndex + 1) / currentLearningSession.currentBatch.length;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const modePrefix = currentLearningSession.isReviewMode ? 'üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: ' : '';

    switch(currentLearningSession.phase) {
        case 'learning':
            phaseText = `${modePrefix}üìö –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–∞ ${currentBatchNum}/${totalBatches}`;
            phaseColor = currentLearningSession.isReviewMode ?
                'linear-gradient(135deg, #FF9500 0%, #FF6B35 100%)' :
                'linear-gradient(135deg, #A8E6CF 0%, #7FCDCD 100%)';
            progressPercent = (batchProgress + currentPhaseProgress) / (totalBatches * 4) * 100;
            break;
        case 'quiz_rus_to_eng':
            phaseText = `${modePrefix}üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π`;
            phaseColor = 'linear-gradient(135deg, #FFB6C1 0%, #FFA07A 100%)';
            progressPercent = (batchProgress + 1 + currentPhaseProgress) / (totalBatches * 4) * 100;
            break;
        case 'quiz_eng_to_rus':
            phaseText = `${modePrefix}üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π`;
            phaseColor = 'linear-gradient(135deg, #87CEEB 0%, #98FB98 100%)';
            progressPercent = (batchProgress + 2 + currentPhaseProgress) / (totalBatches * 4) * 100;
            break;
        case 'text_input':
            phaseText = `${modePrefix}‚úçÔ∏è –ü–∏—Å—å–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç`;
            phaseColor = 'linear-gradient(135deg, #DDA0DD 0%, #F0E68C 100%)';
            progressPercent = (batchProgress + 3 + currentPhaseProgress) / (totalBatches * 4) * 100;
            break;
    }

    const progressEl = document.getElementById('word-progress');
    const phaseEl = document.getElementById('learning-phase');
    const progressFillEl = document.getElementById('learning-progress-fill');

    if (progressEl) progressEl.textContent = `${currentLearningSession.currentIndex + 1} / ${currentLearningSession.currentBatch.length}`;
    if (phaseEl) {
        phaseEl.textContent = phaseText;
        phaseEl.style.background = phaseColor;
    }
    if (progressFillEl) progressFillEl.style.width = progressPercent + '%';
}

function setupPhaseInterface() {
    const memoryAction = document.getElementById('memory-action');
    const quizOptions = document.getElementById('quiz-options');
    const textInputSection = document.getElementById('text-input-section');
    const wordEnglish = document.getElementById('word-english');
    const wordRussian = document.getElementById('word-russian');
    const wordTranscript = document.getElementById('word-transcript');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (memoryAction) memoryAction.style.display = 'none';
    if (quizOptions) quizOptions.style.display = 'none';
    if (textInputSection) textInputSection.style.display = 'none';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    resetQuiz();

    switch(currentLearningSession.phase) {
        case 'learning':
            if (wordEnglish) wordEnglish.style.display = 'block';
            if (wordRussian) {
                wordRussian.style.display = 'block';
                wordRussian.classList.add('revealed');
            }
            if (wordTranscript) wordTranscript.style.display = 'block';
            if (memoryAction) memoryAction.style.display = 'block';
            break;

        case 'quiz_rus_to_eng':
            if (wordEnglish) wordEnglish.style.display = 'none';
            if (wordRussian) {
                wordRussian.style.display = 'block';
                wordRussian.classList.add('revealed');
            }
            if (wordTranscript) wordTranscript.style.display = 'none';
            if (quizOptions) {
                quizOptions.style.display = 'block';
                setupQuiz('rus_to_eng');
            }
            break;

        case 'quiz_eng_to_rus':
            if (wordEnglish) wordEnglish.style.display = 'block';
            if (wordRussian) wordRussian.style.display = 'none';
            if (wordTranscript) wordTranscript.style.display = 'block';
            if (quizOptions) {
                quizOptions.style.display = 'block';
                setupQuiz('eng_to_rus');
            }
            break;

        case 'text_input':
            if (wordEnglish) wordEnglish.style.display = 'none';
            if (wordRussian) wordRussian.style.display = 'none';
            if (wordTranscript) wordTranscript.style.display = 'none';
            if (textInputSection) {
                textInputSection.style.display = 'block';
                setupTextInput();
            }
            break;
    }
}

function setupQuiz(direction) {
    const currentWord = currentLearningSession.currentBatch[currentLearningSession.currentIndex];
    const questionEl = document.getElementById('quiz-question');

    let correctAnswer, wrongAnswers, question;

    if (direction === 'rus_to_eng') {
        correctAnswer = currentWord.eng;
        wrongAnswers = getRandomWordsFromBatch(currentLearningSession.currentBatch, currentWord.id, 3, 'eng');
        question = '–ö–∞–∫ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?';
    } else {
        correctAnswer = currentWord.rus;
        wrongAnswers = getRandomWordsFromBatch(currentLearningSession.currentBatch, currentWord.id, 3, 'rus');
        question = '–ö–∞–∫ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º?';
    }

    if (questionEl) questionEl.textContent = question;

    const allOptions = [correctAnswer, ...wrongAnswers];
    const shuffledOptions = shuffleArray(allOptions);
    const correctIndex = shuffledOptions.indexOf(correctAnswer);

    for (let i = 0; i < 4; i++) {
        const optionBtn = document.getElementById(`option-${i}`);
        if (optionBtn) {
            optionBtn.textContent = shuffledOptions[i];
            optionBtn.className = 'option-btn';
            optionBtn.dataset.correct = (i === correctIndex) ? 'true' : 'false';
        }
    }
}

function getRandomWordsFromBatch(batch, excludeId, count, field) {
    const otherWords = batch.filter(word => word.id !== excludeId);
    if (otherWords.length < count) {
        // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –≤ –±–∞—Ç—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const fallbackWords = ['cat', 'dog', 'house', 'car', 'book', 'water', 'sun', 'tree'];
        const fallbackRus = ['–∫–æ—Ç', '—Å–æ–±–∞–∫–∞', '–¥–æ–º', '–º–∞—à–∏–Ω–∞', '–∫–Ω–∏–≥–∞', '–≤–æ–¥–∞', '—Å–æ–ª–Ω—Ü–µ', '–¥–µ—Ä–µ–≤–æ'];
        const fallback = field === 'eng' ? fallbackWords : fallbackRus;
        const shuffled = shuffleArray([...otherWords.map(w => w[field]), ...fallback]);
        return shuffled.slice(0, count);
    }
    const shuffled = shuffleArray([...otherWords]);
    return shuffled.slice(0, count).map(word => word[field]);
}

function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

function selectAnswer(optionIndex) {
    const optionBtn = document.getElementById(`option-${optionIndex}`);
    const isCorrect = optionBtn.dataset.correct === 'true';

    for (let i = 0; i < 4; i++) {
        const btn = document.getElementById(`option-${i}`);
        btn.style.pointerEvents = 'none';

        if (btn.dataset.correct === 'true') {
            btn.classList.add('correct');
        }
    }

    if (isCorrect) {
        setTimeout(() => nextWord(), 1500);
    } else {
        optionBtn.classList.add('wrong');

        const currentWord = currentLearningSession.currentBatch[currentLearningSession.currentIndex];
        if (!currentLearningSession.wrongAnswers.includes(currentWord.id)) {
            currentLearningSession.wrongAnswers.push(currentWord.id);
        }

        setTimeout(() => {
            resetQuiz();
            setupPhaseInterface();
        }, 2000);
    }
}

function resetQuiz() {
    for (let i = 0; i < 4; i++) {
        const btn = document.getElementById(`option-${i}`);
        if (btn) {
            btn.className = 'option-btn';
            btn.style.pointerEvents = 'auto';
        }
    }
}

function setupTextInput() {
    const currentWord = currentLearningSession.currentBatch[currentLearningSession.currentIndex];
    const direction = Math.random() > 0.5 ? 'rus_to_eng' : 'eng_to_rus';
    const questionEl = document.getElementById('input-question');
    const inputEl = document.getElementById('text-input');

    if (direction === 'rus_to_eng') {
        if (questionEl) questionEl.textContent = `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: "${currentWord.rus}"`;
        if (inputEl) {
            inputEl.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ';
            inputEl.dataset.correct = currentWord.eng.toLowerCase();
        }
    } else {
        if (questionEl) questionEl.textContent = `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: "${currentWord.eng}"`;
        if (inputEl) {
            inputEl.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ';
            inputEl.dataset.correct = currentWord.rus.toLowerCase();
        }
    }

    if (inputEl) {
        inputEl.value = '';
        inputEl.className = 'text-input';
        inputEl.focus();
    }
}

function checkTextAnswer() {
    const inputEl = document.getElementById('text-input');
    const userAnswer = inputEl.value.toLowerCase().trim();
    const correctAnswer = inputEl.dataset.correct;

    if (userAnswer === correctAnswer) {
        inputEl.classList.add('correct');
        setTimeout(() => nextWord(), 1500);
    } else {
        inputEl.classList.add('wrong');

        const currentWord = currentLearningSession.currentBatch[currentLearningSession.currentIndex];
        if (!currentLearningSession.wrongAnswers.includes(currentWord.id)) {
            currentLearningSession.wrongAnswers.push(currentWord.id);
        }

        setTimeout(() => {
            alert(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`);
            inputEl.className = 'text-input';
            inputEl.value = '';
            inputEl.focus();
        }, 1000);
    }
}

function nextWord() {
    currentLearningSession.currentIndex++;

    if (currentLearningSession.currentIndex >= currentLearningSession.currentBatch.length) {
        switchToNextPhase();
        return;
    }

    displayCurrentWord();
}

function switchToNextPhase() {
    currentLearningSession.currentIndex = 0;

    switch(currentLearningSession.phase) {
        case 'learning':
            currentLearningSession.phase = 'quiz_rus_to_eng';
            displayCurrentWord();
            break;
        case 'quiz_rus_to_eng':
            currentLearningSession.phase = 'quiz_eng_to_rus';
            displayCurrentWord();
            break;
        case 'quiz_eng_to_rus':
            currentLearningSession.phase = 'text_input';
            displayCurrentWord();
            break;
        case 'text_input':
            completeBatch();
            break;
    }
}

async function completeBatch() {
    console.log('üéØ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Ç–∏—é —Å–ª–æ–≤...');

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ –í –ë–î
    if (!currentLearningSession.isReviewMode && userData) {
        const batchWords = currentLearningSession.currentBatch;
        const wordIds = batchWords.map(word => word.id);

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ë–î:', wordIds);

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
            await apiRequest(`/users/${telegramUser.id}/learn-words`, 'POST', wordIds);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            userData.eng_learned_words = [...new Set([...(userData.eng_learned_words || []), ...wordIds])];
            userData.last_learning_date = new Date().toISOString().split('T')[0];

            console.log('‚úÖ –°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–µ');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –ë–î:', error);
        }
    }

    currentLearningSession.batchIndex++;

    const totalBatches = Math.ceil(currentLearningSession.allWords.length / currentLearningSession.batchSize);

    if (currentLearningSession.batchIndex >= totalBatches) {
        updateUI();
        updateTodayProgress();
        showCompletionScreen();
    } else {
        showNextBatchButton();
    }
}

function showNextBatchButton() {
    alert('–ü–∞—Ä—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–∞–º.');

    loadCurrentBatch();
    currentLearningSession.phase = 'learning';
    currentLearningSession.wrongAnswers = [];

    displayCurrentWord();
}

function showCompletionScreen() {
    const completionTitle = document.querySelector('.completion-title');
    const completionSubtitle = document.querySelector('.completion-subtitle');

    if (completionTitle && completionSubtitle) {
        if (currentLearningSession.isReviewMode) {
            completionTitle.textContent = '–û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ!';
            completionSubtitle.textContent = '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∑–∞–∫—Ä–µ–ø–∏–ª–∏ –∑–Ω–∞–Ω–∏—è';
        } else {
            completionTitle.textContent = '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!';
            completionSubtitle.textContent = '–í—ã –≤—ã—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è';
        }
    }

    showScreen('completion');
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è playSound
function playSound() {
    const playBtn = document.querySelector('.play-button');
    if (playBtn) {
        playBtn.style.transform = 'scale(0.9)';
        setTimeout(() => {
            playBtn.style.transform = 'scale(1)';
        }, 150);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    const currentWord = currentLearningSession.currentBatch?.[currentLearningSession.currentIndex];

    if (!currentWord) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
        return;
    }

    console.log('üîä –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –¥–ª—è —Å–ª–æ–≤–∞:', currentWord.eng);
    console.log('üîç –î–∞–Ω–Ω—ã–µ sound_data:', currentWord.sound_data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã sound_data
    let audioBase64 = null;

    if (currentWord.sound_data) {
        if (typeof currentWord.sound_data === 'string') {
            // sound_data —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ base64
            audioBase64 = currentWord.sound_data;
            console.log('üéµ –ù–∞–π–¥–µ–Ω –∑–≤—É–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞');
        } else if (currentWord.sound_data.gtts) {
            // sound_data —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º gtts (Google Text-to-Speech)
            audioBase64 = currentWord.sound_data.gtts;
            console.log('üéµ –ù–∞–π–¥–µ–Ω –∑–≤—É–∫ –≤ sound_data.gtts');
        } else if (currentWord.sound_data.voice) {
            // sound_data —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º voice
            audioBase64 = currentWord.sound_data.voice;
            console.log('üéµ –ù–∞–π–¥–µ–Ω –∑–≤—É–∫ –≤ sound_data.voice');
        } else if (currentWord.sound_data.audio) {
            // –í–æ–∑–º–æ–∂–Ω–æ –∑–≤—É–∫ –≤ –ø–æ–ª–µ audio
            audioBase64 = currentWord.sound_data.audio;
            console.log('üéµ –ù–∞–π–¥–µ–Ω –∑–≤—É–∫ –≤ sound_data.audio');
        }
    }

    if (audioBase64) {
        try {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:audio –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            const cleanBase64 = audioBase64.replace(/^data:audio\/[^;]+;base64,/, '');

            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç (GTTS –æ–±—ã—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3)
            const audio = new Audio(`data:audio/mp3;base64,${cleanBase64}`);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            audio.volume = 0.8;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            audio.onloadstart = () => console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ...');
            audio.oncanplay = () => console.log('‚ñ∂Ô∏è –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
            audio.onended = () => console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            audio.onerror = (e) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
                showPlayError();
            };

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            audio.play().then(() => {
                console.log('üîä –ó–≤—É–∫ GTTS —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –¥–ª—è —Å–ª–æ–≤–∞:', currentWord.eng);
            }).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ GTTS:', error);

                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                tryAlternativeAudio(cleanBase64, currentWord.eng);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            tryAlternativeAudio(audioBase64, currentWord.eng);
        }
    } else {
        console.log('‚ö†Ô∏è –ó–≤—É–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–ª–æ–≤–∞:', currentWord.eng);

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        tryTextToSpeech(currentWord.eng);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function showPlayError() {
    const playBtn = document.querySelector('.play-button');
    if (playBtn) {
        const originalHTML = playBtn.innerHTML;
        const originalStyle = playBtn.style.background;

        playBtn.innerHTML = '<svg width="28" height="28" viewBox="0 0 24 24" fill="none"><path d="M12 9v2m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z" stroke="white" stroke-width="2"/></svg>';
        playBtn.style.background = '#FF3B30';

        setTimeout(() => {
            playBtn.innerHTML = originalHTML;
            playBtn.style.background = originalStyle;
        }, 2000);
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∞—É–¥–∏–æ
function tryAlternativeAudio(base64Data, word) {
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ...');

    const formats = ['wav', 'ogg', 'webm'];

    for (const format of formats) {
        try {
            const audio = new Audio(`data:audio/${format};base64,${base64Data}`);
            audio.volume = 0.8;

            audio.play().then(() => {
                console.log(`üîä –ó–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format} –¥–ª—è —Å–ª–æ–≤–∞:`, word);
                return; // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            }).catch(() => {
                console.log(`‚ùå –§–æ—Ä–º–∞—Ç ${format} –Ω–µ –ø–æ–¥–æ—à–µ–ª`);
            });

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ${format}:`, error);
        }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    setTimeout(() => tryTextToSpeech(word), 1000);
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
function tryTextToSpeech(text) {
    if ('speechSynthesis' in window) {
        console.log('üó£Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è:', text);

        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'en-US';
        utterance.rate = 0.8;
        utterance.pitch = 1;
        utterance.volume = 0.8;

        utterance.onstart = () => console.log('üó£Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏');
        utterance.onend = () => console.log('‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
        utterance.onerror = (e) => console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', e);

        speechSynthesis.speak(utterance);
    } else {
        console.log('‚ùå –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
        showPlayError();
    }
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è updateUI
function updateUI() {
    if (!userData) return;

    const totalLearnedWords = userData.eng_learned_words?.length || 0;
    const currentStreak = userData.current_streak || 0;
    const trainingCount = Math.floor(totalLearnedWords / 5);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const streakEl = document.getElementById('streak-count');
    const wordsEl = document.getElementById('total-words');
    const trainingEl = document.getElementById('training-count');

    if (streakEl) streakEl.textContent = currentStreak;
    if (wordsEl) wordsEl.textContent = totalLearnedWords;
    if (trainingEl) trainingEl.textContent = trainingCount;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    const streakDetail = document.getElementById('streak-count-detail');
    const wordsDetail = document.getElementById('total-words-detail');
    const trainingDetail = document.getElementById('training-count-detail');

    if (streakDetail) streakDetail.textContent = currentStreak;
    if (wordsDetail) wordsDetail.textContent = totalLearnedWords;
    if (trainingDetail) trainingDetail.textContent = trainingCount;

    updateTodayProgress();
    updateTodayDate();

    console.log('üìä UI –æ–±–Ω–æ–≤–ª–µ–Ω - Streak:', currentStreak, '–°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ:', totalLearnedWords, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', trainingCount);
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function animateProgressCircle() {
    const progressBar = document.getElementById('progress-bar');
    if (progressBar) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä—è—á–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressBar.style.strokeDashoffset = '377';

        // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            updateTodayProgress();
        }, 500);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        const textInput = document.getElementById('text-input');
        if (textInput && textInput === document.activeElement) {
            checkTextAnswer();
        }
    }
});

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    initTelegramWebApp();

    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(animateProgressCircle, 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('beforeunload', function() {
    if (userData) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...');
        saveUserData();
    }
});