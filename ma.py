import os
import random
from datetime import date
from typing import List, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from pydantic import BaseModel
from dotenv import load_dotenv
import mimetypes

from models import User, Word, Base

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL not set in environment variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
async_engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = async_sessionmaker(
    bind=async_engine,
    expire_on_commit=False,
)


# Pydantic –º–æ–¥–µ–ª–∏
class UserCreate(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: str
    last_name: Optional[str] = None


class UserUpdate(BaseModel):
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    words_per_day: Optional[int] = None
    eng_learned_words: Optional[List[int]] = None
    eng_skipped_words: Optional[List[int]] = None
    last_learning_date: Optional[date] = None
    current_streak: Optional[int] = None
    exp: Optional[int] = None


class UserResponse(BaseModel):
    telegram_id: int
    username: Optional[str]
    first_name: str
    last_name: Optional[str]
    exp: int
    words_per_day: Optional[int]
    eng_learned_words: List[int]
    eng_skipped_words: List[int]
    last_learning_date: Optional[date]
    current_streak: int

    class Config:
        from_attributes = True


class WordResponse(BaseModel):
    id: int
    eng: str
    rus: str
    transcript: Optional[str]
    image_data: Optional[str]
    sound_data: Optional[dict]

    class Config:
        from_attributes = True


class WordsByIdsRequest(BaseModel):
    ids: List[int]


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î
async def get_db() -> AsyncSession:
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    async with async_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    yield

    # Shutdown
    await async_engine.dispose()
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Language Learning API",
    version="1.0.0",
    lifespan=lifespan
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


app.mount("/static", StaticFiles(directory="static"), name="static")

from fastapi.responses import Response
@app.get("/static/{file_path:path}")
async def serve_static_file(file_path: str):
    file_location = f"static/{file_path}"

    if not os.path.exists(file_location):
        raise HTTPException(status_code=404, detail="File not found")

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ bytes, –Ω–µ –∫–∞–∫ text!
    with open(file_location, 'rb') as f:
        content = f.read()

    mime_type = 'application/javascript' if file_path.endswith('.js') else None

    return Response(
        content=content,  # bytes, –Ω–µ string!
        media_type=mime_type
    )

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/")
async def serve_index():
    """
    –û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    return FileResponse("static/index.html", media_type="text/html")


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/static/")
async def serve_index_static():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è index.html
    """
    return FileResponse("static/index.html", media_type="text/html")


# API endpoints

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {"status": "healthy", "message": "Language Learning API is running"}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@app.get("/check-static")
async def check_static():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    static_files = []
    static_exists = os.path.exists("static")

    if static_exists:
        try:
            static_files = os.listdir("static")
        except Exception as e:
            return {
                "static_directory_exists": static_exists,
                "error": str(e),
                "files": []
            }

    return {
        "static_directory_exists": static_exists,
        "files": static_files,
        "required_files": {
            "index.html": os.path.exists("static/index.html"),
            "script.js": os.path.exists("static/script.js"),
            "styles.css": os.path.exists("static/styles.css")
        }
    }


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@app.get("/api/users/{telegram_id}", response_model=UserResponse)
async def get_user(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    result = await db.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user = User(
            telegram_id=telegram_id,
            first_name="User",
            exp=0,
            words_per_day=None,
            eng_learned_words=[],
            eng_skipped_words=[],
            current_streak=0
        )
        db.add(user)
        await db.commit()
        await db.refresh(user)

    return user


@app.post("/api/users", response_model=UserResponse)
async def create_user(user_data: UserCreate, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = await db.execute(
        select(User).where(User.telegram_id == user_data.telegram_id)
    )
    existing_user = result.scalar_one_or_none()

    if existing_user:
        return existing_user

    user = User(
        telegram_id=user_data.telegram_id,
        username=user_data.username,
        first_name=user_data.first_name,
        last_name=user_data.last_name,
        exp=0,
        eng_learned_words=[],
        eng_skipped_words=[],
        current_streak=0
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)
    return user


@app.put("/api/users/{telegram_id}", response_model=UserResponse)
async def update_user(telegram_id: int, user_data: UserUpdate, db: AsyncSession = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    for field, value in user_data.model_dump(exclude_unset=True).items():
        setattr(user, field, value)

    await db.commit()
    await db.refresh(user)
    return user


# –°–ª–æ–≤–∞
@app.get("/api/words", response_model=List[WordResponse])
async def get_words(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    result = await db.execute(
        select(Word).offset(skip).limit(limit)
    )
    words = result.scalars().all()
    return words


@app.get("/api/words/{word_id}", response_model=WordResponse)
async def get_word(word_id: int, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ ID"""
    result = await db.execute(
        select(Word).where(Word.id == word_id)
    )
    word = result.scalar_one_or_none()

    if not word:
        raise HTTPException(status_code=404, detail="Word not found")
    return word


@app.get("/api/words/random/{count}", response_model=List[WordResponse])
async def get_random_words(count: int, exclude: Optional[str] = None, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    if count <= 0:
        raise HTTPException(status_code=400, detail="Count must be positive")

    if count > 100:
        count = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    query = select(Word)

    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID
    if exclude:
        try:
            exclude_ids = [int(x) for x in exclude.split(',') if x.strip()]
            if exclude_ids:
                query = query.where(~Word.id.in_(exclude_ids))
        except ValueError:
            raise HTTPException(status_code=400, detail="Invalid exclude parameter")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞
    result = await db.execute(query.order_by(func.random()).limit(count))
    words = result.scalars().all()

    return words


@app.post("/api/words/by-ids", response_model=List[WordResponse])
async def get_words_by_ids(request: WordsByIdsRequest, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É ID"""
    if not request.ids:
        return []

    if len(request.ids) > 100:
        raise HTTPException(status_code=400, detail="Too many IDs requested")

    result = await db.execute(
        select(Word).where(Word.id.in_(request.ids))
    )
    words = result.scalars().all()
    return words


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@app.get("/api/users/{telegram_id}/stats")
async def get_user_stats(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    total_words = len(user.eng_learned_words) if user.eng_learned_words else 0
    training_count = total_words // 5  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 —Å–ª–æ–≤ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    learned_today = 0
    if user.last_learning_date == today and user.eng_learned_words:
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
        learned_today = min(total_words, user.words_per_day or 0)

    return {
        "streak": user.current_streak,
        "total_words": total_words,
        "training_count": training_count,
        "learned_today": learned_today,
        "words_per_day": user.words_per_day or 0
    }


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è
@app.post("/api/users/{telegram_id}/learn-words")
async def learn_words(
        telegram_id: int,
        word_ids: List[int],
        db: AsyncSession = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤"""
    if not word_ids:
        raise HTTPException(status_code=400, detail="No word IDs provided")

    if len(word_ids) > 50:
        raise HTTPException(status_code=400, detail="Too many words in one request")

    result = await db.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    today = date.today()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ –∏–∑—É—á–µ–Ω–Ω—ã–º
    current_learned = set(user.eng_learned_words or [])
    new_words = set(word_ids)
    all_learned = list(current_learned | new_words)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.eng_learned_words = all_learned

    # –û–±–Ω–æ–≤–ª—è–µ–º streak —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
    if user.last_learning_date != today:
        from datetime import timedelta
        yesterday = today - timedelta(days=1)

        if user.last_learning_date == yesterday:
            user.current_streak += 1
        else:
            user.current_streak = 1

        user.last_learning_date = today

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    new_words_count = len(new_words - current_learned)
    user.exp += new_words_count * 10  # 10 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞ –∑–∞ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ

    await db.commit()
    await db.refresh(user)

    return {
        "success": True,
        "learned_words": len(all_learned),
        "new_words": new_words_count,
        "exp_gained": new_words_count * 10,
        "current_streak": user.current_streak
    }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
@app.get("/api/test")
async def test_api():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
    return {
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
        "timestamp": date.today().isoformat(),
        "endpoints": {
            "users": "/api/users/{telegram_id}",
            "words": "/api/words",
            "random_words": "/api/words/random/{count}",
            "stats": "/api/users/{telegram_id}/stats"
        }
    }


if __name__ == "__main__":
    import uvicorn

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Language Learning API...")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not os.path.exists("static"):
        print("‚ùå –ü–∞–ø–∫–∞ 'static' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        required_files = ["index.html", "script.js", "styles.css"]
        for file in required_files:
            if os.path.exists(f"static/{file}"):
                print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {file} –ù–ï –Ω–∞–π–¥–µ–Ω!")

    uvicorn.run(app, host="0.0.0.0", port=8000)